by(calendar$name, calendar$month, summary)
by(calendar$day, calendar$month, summary)
by(calendar$day, calendar$month, sum)
by(calendar$Name, calendar$month, sum)
by(calendar$Name, calendar$month, count
)
by(calendar$Name, calendar$month, count)
by(calendar$Name, calendar$month, total)
by(calendar$Name, calendar$month, summary)
by(calendar$Name, calendar$month, length())
by(calendar$Name, calendar$month, lengt)
by(calendar$Name, calendar$month, length)
summary(calendar$month)
qplot(x = month, data = calendar, binwidth = 1,
color = I('black'), fill = I('#099090'),
xlab = "Month of Year",
ylab = "Number of Birthdays")
getwd()
setwd("D:/New School/Udacity/Data analyst nanodegree/Data analysis with R/lesson4")
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
qplot(x = age, y = friend_count, data = pf)
qplot(age, friend_count, data = pf)
ggplot(aes(x = age, y = friend_count), data = pf) + xlim(13,90) + geom_point()
ggplot(aes(x = age, y = friend_count), data = pf) + xlim(13,90) + geom_point(alpha = 1/20)
ggplot(aes(x = age, y = friend_count), data = pf) + xlim(13,90) + geom_jitter(alpha = 1/20)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_points(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
position_jitter(?)
?position_jitter
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
?position_jitter
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.1, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.8, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initated), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
str(pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/15, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/12, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/10, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/11, position = position_jitter(w = 0.5, h = 0)) +
xlim(13,90) + ylim(0,2000) +
coord_trans(y = "sqrt")
library(dplyr)
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups, friend_count_mean = mean(friend_count), friend_count_median = median(friend_count), n=n())
View(pf.fc_by_age)
View(pf.fc_by_age)
View(age_groups)
View(age_groups)
View(age_groups)
View(age_groups)
head(pf.fc_by_age)
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count), friend_count_median = median(friend_count), n=n()) %>%
arrange(age)
head(pf.fc_by_age, 20)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() +
xlim(13,113) + ylim(0,400) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() +
xlim(13,113) + ylim(0,500) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() +
xlim(13,113) + ylim(90,500) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() +
xlim(13,113) + ylim(90,500)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_point() +
xlim(13,113) + ylim(90,500)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() +
xlim(13,113) + ylim(90,500)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0), color = 'orange') +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
xlim(13,90) +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
xlim(13,90) +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
coord_cartesion(xlim = c(13,90)) + coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
coord_cartesian(xlim = c(13,90)) + coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) + geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') + coord_cartesian(xlim = c(13,90)) + coord_trans(y = "sqrt") + geom_line(stat = 'summary', fun.y = mean) + geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') + geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
coord_cartesian(xlim = c(13,90)) + coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
coord_trans(y = "sqrt") + geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue') +
coord_cartesian(xlim = c(13,90))
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue') +
coord_cartesian(xlim = c(13,90)) + coord_trans(y = "sqrt")
?coord_cartesion
?coord_cartesian
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue') +
coord_cartesian(xlim = c(13,90)) + scale_y_sqrt()
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(w = 0.5, h = 0), color = 'orange') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1, linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.5, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.9, linetype = 2, color = 'blue') +
coord_cartesian(xlim = c(13,90)) + scale_y_sqrt()
?cov.test
?cor.test
cor.test(pf$age, pf$friend_count)
with(subset(pf, age <= 70)               , cor.test(age, friend_count))
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(gridExtra)
plot1 <- qplot(x = price,data = diamonds, binwidth = 100, fill = I('#099009')) +
ggtitle('Price')
plot2 <- qplot(x = price, data = diamonds, binwidth = 0.01, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
library(gridExtra)
library(grid)
grid.arrange(plot1, plot2, ncol = 2)
?diamonds
qplot(carat, price, data = diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
?trans_new
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 0.5, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('RCurl')
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
data(diamonds)
str(diaomonds)
str(diamonds)
View(diamonds)
thisDiamond = data.frame(carat = 1.00, cut = "Very Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
exp(modelEstimate)
$summary
?summary
summary(diamonds$price, subset(diamonds, carat == 1.00 & cut == "Very Good" & color == "I" & clarity =="VS1" ))
?diamonds
thisDiamond = data.frame(carat = 1.00, cut = "Very Good",
color = "D", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
exp(modelEstimate)
summary(diamonds$price, subset(diamonds, carat == 1.00 & cut == "Very Good" & color == "D" & clarity =="VS1" ))
summary(diamonds$price, subset(diamonds, diamonds$carat == 1.00 & diamonds$cut == "Very Good" & diamonds$color == "I" & diamonds$clarity =="VS1" ))
summary(subset(diamonds, diamonds$carat == 1.00 & diamonds$cut == "Very Good" & diamonds$color == "I" & diamonds$clarity =="VS1" ))
summary(subset(diamonds, diamonds$carat == 1.00 & diamonds$cut == "Very Good" & diamonds$color == "D" & diamonds$clarity =="VS1" ))
thisDiamond = data.frame(carat = 1.00, cut = "Very Good",
color = "D", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
exp(modelEstimate)
summary(subset(diamonds, diamonds$carat == 1.00 & diamonds$cut == "Very Good" & diamonds$color == "D" & diamonds$clarity =="VS1" ))
library('ggplot2')
data(diamonds)
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
```{r Use cuberoot_trans}
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
View(cuberoot_trans)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
View(diamonds)
ggplot(aes(x = fixed.acidity), data=whites) + geom_histogram()
library(ggplot2)
library(grid)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
library(alr3)
library(dplyr)
library(RColorBrewer)
library(reshape2)
whites <- read.csv("wineQualityWhites.csv")
setwd("D:/New School/Udacity/Data analyst nanodegree/Data analysis with R/Project")
whites <- read.csv("wineQualityWhites.csv")
ggplot(aes(x = fixed.acidity), data=whites) + geom_histogram()
ggplot(aes(x = fixed.acidity), data=whites)
+ geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green"))
+ scale_x_continuous(limits = c(4, 10), breaks = seq(4, 10, 0.5))
ggplot(aes(x = fixed.acidity), data=whites)
+ geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green"))
View(whites)
ggplot(aes(x = fixed.acidity), data=whites)
+ geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green"))
ggplot(aes(x = volatile.acidity), data=whites)
+ geom_histogram(binwidth = 0.02, fill=I("black"), col=I("green"))
+ scale_x_continuous(limits = c(0.1, .7), breaks = seq(0.1, .7, 0.05))
ggplot(aes(x = fixed.acidity), data=whites) + geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green"))
ggplot(aes(x = fixed.acidity), data=whites) +
geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green"))
ggplot(aes(x = fixed.acidity), data=whites) +
geom_histogram(binwidth = 0.2, fill=I("black"), col=I("green")) +
scale_x_continuous(limits = c(4, 10), breaks = seq(4, 10, 0.5))
cor(whites[, c(2:12,14)])
cor(whites[, c(2:13)])
ggpairs(whites[, c(2:12,14)],
upper = list(continuous = "density", combo = "box", discrete = 'facetbar'),
lower = list(continuous = "smooth", combo = "facetdensity"),
diag = list(combo = "box"))
View(whites)
whites$quality.factor <- as.factor(whites$quality)
ggpairs(whites[, c(2:12,14)],
upper = list(continuous = "density", combo = "box", discrete = 'facetbar'),
lower = list(continuous = "smooth", combo = "facetdensity"),
diag = list(combo = "box"))
ggplot(aes(x = residual.sugar, y = alcohol), data = whites.cleaned) +
geom_point(aes(color = quality.factor), alpha = 0.5) +
scale_color_brewer(type = 'div', palette = 4,
guide = guide_legend(title = 'Quality', reverse = T,
override.aes = list(size = 4)))
